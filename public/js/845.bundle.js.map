{"version":3,"file":"845.bundle.js","mappings":"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","sources":["webpack://community-treks/./node_modules/@turf/invariant/dist/esm/index.js","webpack://community-treks/./node_modules/@turf/helpers/dist/esm/index.js","webpack://community-treks/./node_modules/@turf/distance/dist/esm/index.js","webpack://community-treks/./node_modules/@turf/meta/dist/esm/index.js","webpack://community-treks/./node_modules/@turf/length/dist/esm/index.js","webpack://community-treks/./src/js/track-loader.js"],"sourcesContent":["// index.ts\nimport { isNumber } from \"@turf/helpers\";\nfunction getCoord(coord) {\n  if (!coord) {\n    throw new Error(\"coord is required\");\n  }\n  if (!Array.isArray(coord)) {\n    if (coord.type === \"Feature\" && coord.geometry !== null && coord.geometry.type === \"Point\") {\n      return [...coord.geometry.coordinates];\n    }\n    if (coord.type === \"Point\") {\n      return [...coord.coordinates];\n    }\n  }\n  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {\n    return [...coord];\n  }\n  throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\nfunction getCoords(coords) {\n  if (Array.isArray(coords)) {\n    return coords;\n  }\n  if (coords.type === \"Feature\") {\n    if (coords.geometry !== null) {\n      return coords.geometry.coordinates;\n    }\n  } else {\n    if (coords.coordinates) {\n      return coords.coordinates;\n    }\n  }\n  throw new Error(\n    \"coords must be GeoJSON Feature, Geometry Object or an Array\"\n  );\n}\nfunction containsNumber(coordinates) {\n  if (coordinates.length > 1 && isNumber(coordinates[0]) && isNumber(coordinates[1])) {\n    return true;\n  }\n  if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n    return containsNumber(coordinates[0]);\n  }\n  throw new Error(\"coordinates must only contain numbers\");\n}\nfunction geojsonType(value, type, name) {\n  if (!type || !name) {\n    throw new Error(\"type and name required\");\n  }\n  if (!value || value.type !== type) {\n    throw new Error(\n      \"Invalid input to \" + name + \": must be a \" + type + \", given \" + value.type\n    );\n  }\n}\nfunction featureOf(feature, type, name) {\n  if (!feature) {\n    throw new Error(\"No feature passed\");\n  }\n  if (!name) {\n    throw new Error(\".featureOf() requires a name\");\n  }\n  if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n    throw new Error(\n      \"Invalid input to \" + name + \", Feature with geometry required\"\n    );\n  }\n  if (!feature.geometry || feature.geometry.type !== type) {\n    throw new Error(\n      \"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type\n    );\n  }\n}\nfunction collectionOf(featureCollection, type, name) {\n  if (!featureCollection) {\n    throw new Error(\"No featureCollection passed\");\n  }\n  if (!name) {\n    throw new Error(\".collectionOf() requires a name\");\n  }\n  if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n    throw new Error(\n      \"Invalid input to \" + name + \", FeatureCollection required\"\n    );\n  }\n  for (const feature of featureCollection.features) {\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n      throw new Error(\n        \"Invalid input to \" + name + \", Feature with geometry required\"\n      );\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n      throw new Error(\n        \"Invalid input to \" + name + \": must be a \" + type + \", given \" + feature.geometry.type\n      );\n    }\n  }\n}\nfunction getGeom(geojson) {\n  if (geojson.type === \"Feature\") {\n    return geojson.geometry;\n  }\n  return geojson;\n}\nfunction getType(geojson, _name) {\n  if (geojson.type === \"FeatureCollection\") {\n    return \"FeatureCollection\";\n  }\n  if (geojson.type === \"GeometryCollection\") {\n    return \"GeometryCollection\";\n  }\n  if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n    return geojson.geometry.type;\n  }\n  return geojson.type;\n}\nexport {\n  collectionOf,\n  containsNumber,\n  featureOf,\n  geojsonType,\n  getCoord,\n  getCoords,\n  getGeom,\n  getType\n};\n//# sourceMappingURL=index.js.map","// index.ts\nvar earthRadius = 63710088e-1;\nvar factors = {\n  centimeters: earthRadius * 100,\n  centimetres: earthRadius * 100,\n  degrees: 360 / (2 * Math.PI),\n  feet: earthRadius * 3.28084,\n  inches: earthRadius * 39.37,\n  kilometers: earthRadius / 1e3,\n  kilometres: earthRadius / 1e3,\n  meters: earthRadius,\n  metres: earthRadius,\n  miles: earthRadius / 1609.344,\n  millimeters: earthRadius * 1e3,\n  millimetres: earthRadius * 1e3,\n  nauticalmiles: earthRadius / 1852,\n  radians: 1,\n  yards: earthRadius * 1.0936\n};\nvar areaFactors = {\n  acres: 247105e-9,\n  centimeters: 1e4,\n  centimetres: 1e4,\n  feet: 10.763910417,\n  hectares: 1e-4,\n  inches: 1550.003100006,\n  kilometers: 1e-6,\n  kilometres: 1e-6,\n  meters: 1,\n  metres: 1,\n  miles: 386e-9,\n  nauticalmiles: 29155334959812285e-23,\n  millimeters: 1e6,\n  millimetres: 1e6,\n  yards: 1.195990046\n};\nfunction feature(geom, properties, options = {}) {\n  const feat = { type: \"Feature\" };\n  if (options.id === 0 || options.id) {\n    feat.id = options.id;\n  }\n  if (options.bbox) {\n    feat.bbox = options.bbox;\n  }\n  feat.properties = properties || {};\n  feat.geometry = geom;\n  return feat;\n}\nfunction geometry(type, coordinates, _options = {}) {\n  switch (type) {\n    case \"Point\":\n      return point(coordinates).geometry;\n    case \"LineString\":\n      return lineString(coordinates).geometry;\n    case \"Polygon\":\n      return polygon(coordinates).geometry;\n    case \"MultiPoint\":\n      return multiPoint(coordinates).geometry;\n    case \"MultiLineString\":\n      return multiLineString(coordinates).geometry;\n    case \"MultiPolygon\":\n      return multiPolygon(coordinates).geometry;\n    default:\n      throw new Error(type + \" is invalid\");\n  }\n}\nfunction point(coordinates, properties, options = {}) {\n  if (!coordinates) {\n    throw new Error(\"coordinates is required\");\n  }\n  if (!Array.isArray(coordinates)) {\n    throw new Error(\"coordinates must be an Array\");\n  }\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be at least 2 numbers long\");\n  }\n  if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n    throw new Error(\"coordinates must contain numbers\");\n  }\n  const geom = {\n    type: \"Point\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction points(coordinates, properties, options = {}) {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return point(coords, properties);\n    }),\n    options\n  );\n}\nfunction polygon(coordinates, properties, options = {}) {\n  for (const ring of coordinates) {\n    if (ring.length < 4) {\n      throw new Error(\n        \"Each LinearRing of a Polygon must have 4 or more Positions.\"\n      );\n    }\n    if (ring[ring.length - 1].length !== ring[0].length) {\n      throw new Error(\"First and last Position are not equivalent.\");\n    }\n    for (let j = 0; j < ring[ring.length - 1].length; j++) {\n      if (ring[ring.length - 1][j] !== ring[0][j]) {\n        throw new Error(\"First and last Position are not equivalent.\");\n      }\n    }\n  }\n  const geom = {\n    type: \"Polygon\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction polygons(coordinates, properties, options = {}) {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return polygon(coords, properties);\n    }),\n    options\n  );\n}\nfunction lineString(coordinates, properties, options = {}) {\n  if (coordinates.length < 2) {\n    throw new Error(\"coordinates must be an array of two or more positions\");\n  }\n  const geom = {\n    type: \"LineString\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction lineStrings(coordinates, properties, options = {}) {\n  return featureCollection(\n    coordinates.map((coords) => {\n      return lineString(coords, properties);\n    }),\n    options\n  );\n}\nfunction featureCollection(features, options = {}) {\n  const fc = { type: \"FeatureCollection\" };\n  if (options.id) {\n    fc.id = options.id;\n  }\n  if (options.bbox) {\n    fc.bbox = options.bbox;\n  }\n  fc.features = features;\n  return fc;\n}\nfunction multiLineString(coordinates, properties, options = {}) {\n  const geom = {\n    type: \"MultiLineString\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction multiPoint(coordinates, properties, options = {}) {\n  const geom = {\n    type: \"MultiPoint\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction multiPolygon(coordinates, properties, options = {}) {\n  const geom = {\n    type: \"MultiPolygon\",\n    coordinates\n  };\n  return feature(geom, properties, options);\n}\nfunction geometryCollection(geometries, properties, options = {}) {\n  const geom = {\n    type: \"GeometryCollection\",\n    geometries\n  };\n  return feature(geom, properties, options);\n}\nfunction round(num, precision = 0) {\n  if (precision && !(precision >= 0)) {\n    throw new Error(\"precision must be a positive number\");\n  }\n  const multiplier = Math.pow(10, precision || 0);\n  return Math.round(num * multiplier) / multiplier;\n}\nfunction radiansToLength(radians, units = \"kilometers\") {\n  const factor = factors[units];\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n  return radians * factor;\n}\nfunction lengthToRadians(distance, units = \"kilometers\") {\n  const factor = factors[units];\n  if (!factor) {\n    throw new Error(units + \" units is invalid\");\n  }\n  return distance / factor;\n}\nfunction lengthToDegrees(distance, units) {\n  return radiansToDegrees(lengthToRadians(distance, units));\n}\nfunction bearingToAzimuth(bearing) {\n  let angle = bearing % 360;\n  if (angle < 0) {\n    angle += 360;\n  }\n  return angle;\n}\nfunction azimuthToBearing(angle) {\n  angle = angle % 360;\n  if (angle > 0)\n    return angle > 180 ? angle - 360 : angle;\n  return angle < -180 ? angle + 360 : angle;\n}\nfunction radiansToDegrees(radians) {\n  const degrees = radians % (2 * Math.PI);\n  return degrees * 180 / Math.PI;\n}\nfunction degreesToRadians(degrees) {\n  const radians = degrees % 360;\n  return radians * Math.PI / 180;\n}\nfunction convertLength(length, originalUnit = \"kilometers\", finalUnit = \"kilometers\") {\n  if (!(length >= 0)) {\n    throw new Error(\"length must be a positive number\");\n  }\n  return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nfunction convertArea(area, originalUnit = \"meters\", finalUnit = \"kilometers\") {\n  if (!(area >= 0)) {\n    throw new Error(\"area must be a positive number\");\n  }\n  const startFactor = areaFactors[originalUnit];\n  if (!startFactor) {\n    throw new Error(\"invalid original units\");\n  }\n  const finalFactor = areaFactors[finalUnit];\n  if (!finalFactor) {\n    throw new Error(\"invalid final units\");\n  }\n  return area / startFactor * finalFactor;\n}\nfunction isNumber(num) {\n  return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nfunction isObject(input) {\n  return input !== null && typeof input === \"object\" && !Array.isArray(input);\n}\nfunction validateBBox(bbox) {\n  if (!bbox) {\n    throw new Error(\"bbox is required\");\n  }\n  if (!Array.isArray(bbox)) {\n    throw new Error(\"bbox must be an Array\");\n  }\n  if (bbox.length !== 4 && bbox.length !== 6) {\n    throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n  }\n  bbox.forEach((num) => {\n    if (!isNumber(num)) {\n      throw new Error(\"bbox must only contain numbers\");\n    }\n  });\n}\nfunction validateId(id) {\n  if (!id) {\n    throw new Error(\"id is required\");\n  }\n  if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n    throw new Error(\"id must be a number or a string\");\n  }\n}\nexport {\n  areaFactors,\n  azimuthToBearing,\n  bearingToAzimuth,\n  convertArea,\n  convertLength,\n  degreesToRadians,\n  earthRadius,\n  factors,\n  feature,\n  featureCollection,\n  geometry,\n  geometryCollection,\n  isNumber,\n  isObject,\n  lengthToDegrees,\n  lengthToRadians,\n  lineString,\n  lineStrings,\n  multiLineString,\n  multiPoint,\n  multiPolygon,\n  point,\n  points,\n  polygon,\n  polygons,\n  radiansToDegrees,\n  radiansToLength,\n  round,\n  validateBBox,\n  validateId\n};\n//# sourceMappingURL=index.js.map","// index.ts\nimport { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians } from \"@turf/helpers\";\nfunction distance(from, to, options = {}) {\n  var coordinates1 = getCoord(from);\n  var coordinates2 = getCoord(to);\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n  var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n  return radiansToLength(\n    2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)),\n    options.units\n  );\n}\nvar turf_distance_default = distance;\nexport {\n  turf_distance_default as default,\n  distance\n};\n//# sourceMappingURL=index.js.map","// index.js\nimport { feature, point, lineString, isObject } from \"@turf/helpers\";\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n  if (geojson === null)\n    return;\n  var j, k, l, geometry, stopG, coords, geometryMaybeCollection, wrapShrink = 0, coordIndex = 0, isGeometryCollection, type = geojson.type, isFeatureCollection = type === \"FeatureCollection\", isFeature = type === \"Feature\", stop = isFeatureCollection ? geojson.features.length : 1;\n  for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[featureIndex].geometry : isFeature ? geojson.geometry : geojson;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === \"GeometryCollection\" : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n    for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n      var multiFeatureIndex = 0;\n      var geometryIndex = 0;\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n      if (geometry === null)\n        continue;\n      coords = geometry.coordinates;\n      var geomType = geometry.type;\n      wrapShrink = excludeWrapCoord && (geomType === \"Polygon\" || geomType === \"MultiPolygon\") ? 1 : 0;\n      switch (geomType) {\n        case null:\n          break;\n        case \"Point\":\n          if (callback(\n            coords,\n            coordIndex,\n            featureIndex,\n            multiFeatureIndex,\n            geometryIndex\n          ) === false)\n            return false;\n          coordIndex++;\n          multiFeatureIndex++;\n          break;\n        case \"LineString\":\n        case \"MultiPoint\":\n          for (j = 0; j < coords.length; j++) {\n            if (callback(\n              coords[j],\n              coordIndex,\n              featureIndex,\n              multiFeatureIndex,\n              geometryIndex\n            ) === false)\n              return false;\n            coordIndex++;\n            if (geomType === \"MultiPoint\")\n              multiFeatureIndex++;\n          }\n          if (geomType === \"LineString\")\n            multiFeatureIndex++;\n          break;\n        case \"Polygon\":\n        case \"MultiLineString\":\n          for (j = 0; j < coords.length; j++) {\n            for (k = 0; k < coords[j].length - wrapShrink; k++) {\n              if (callback(\n                coords[j][k],\n                coordIndex,\n                featureIndex,\n                multiFeatureIndex,\n                geometryIndex\n              ) === false)\n                return false;\n              coordIndex++;\n            }\n            if (geomType === \"MultiLineString\")\n              multiFeatureIndex++;\n            if (geomType === \"Polygon\")\n              geometryIndex++;\n          }\n          if (geomType === \"Polygon\")\n            multiFeatureIndex++;\n          break;\n        case \"MultiPolygon\":\n          for (j = 0; j < coords.length; j++) {\n            geometryIndex = 0;\n            for (k = 0; k < coords[j].length; k++) {\n              for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                if (callback(\n                  coords[j][k][l],\n                  coordIndex,\n                  featureIndex,\n                  multiFeatureIndex,\n                  geometryIndex\n                ) === false)\n                  return false;\n                coordIndex++;\n              }\n              geometryIndex++;\n            }\n            multiFeatureIndex++;\n          }\n          break;\n        case \"GeometryCollection\":\n          for (j = 0; j < geometry.geometries.length; j++)\n            if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false)\n              return false;\n          break;\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n  }\n}\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n  var previousValue = initialValue;\n  coordEach(\n    geojson,\n    function(currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (coordIndex === 0 && initialValue === void 0)\n        previousValue = currentCoord;\n      else\n        previousValue = callback(\n          previousValue,\n          currentCoord,\n          coordIndex,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    },\n    excludeWrapCoord\n  );\n  return previousValue;\n}\nfunction propEach(geojson, callback) {\n  var i;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      for (i = 0; i < geojson.features.length; i++) {\n        if (callback(geojson.features[i].properties, i) === false)\n          break;\n      }\n      break;\n    case \"Feature\":\n      callback(geojson.properties, 0);\n      break;\n  }\n}\nfunction propReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  propEach(geojson, function(currentProperties, featureIndex) {\n    if (featureIndex === 0 && initialValue === void 0)\n      previousValue = currentProperties;\n    else\n      previousValue = callback(previousValue, currentProperties, featureIndex);\n  });\n  return previousValue;\n}\nfunction featureEach(geojson, callback) {\n  if (geojson.type === \"Feature\") {\n    callback(geojson, 0);\n  } else if (geojson.type === \"FeatureCollection\") {\n    for (var i = 0; i < geojson.features.length; i++) {\n      if (callback(geojson.features[i], i) === false)\n        break;\n    }\n  }\n}\nfunction featureReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  featureEach(geojson, function(currentFeature, featureIndex) {\n    if (featureIndex === 0 && initialValue === void 0)\n      previousValue = currentFeature;\n    else\n      previousValue = callback(previousValue, currentFeature, featureIndex);\n  });\n  return previousValue;\n}\nfunction coordAll(geojson) {\n  var coords = [];\n  coordEach(geojson, function(coord) {\n    coords.push(coord);\n  });\n  return coords;\n}\nfunction geomEach(geojson, callback) {\n  var i, j, g, geometry, stopG, geometryMaybeCollection, isGeometryCollection, featureProperties, featureBBox, featureId, featureIndex = 0, isFeatureCollection = geojson.type === \"FeatureCollection\", isFeature = geojson.type === \"Feature\", stop = isFeatureCollection ? geojson.features.length : 1;\n  for (i = 0; i < stop; i++) {\n    geometryMaybeCollection = isFeatureCollection ? geojson.features[i].geometry : isFeature ? geojson.geometry : geojson;\n    featureProperties = isFeatureCollection ? geojson.features[i].properties : isFeature ? geojson.properties : {};\n    featureBBox = isFeatureCollection ? geojson.features[i].bbox : isFeature ? geojson.bbox : void 0;\n    featureId = isFeatureCollection ? geojson.features[i].id : isFeature ? geojson.id : void 0;\n    isGeometryCollection = geometryMaybeCollection ? geometryMaybeCollection.type === \"GeometryCollection\" : false;\n    stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n    for (g = 0; g < stopG; g++) {\n      geometry = isGeometryCollection ? geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n      if (geometry === null) {\n        if (callback(\n          null,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        ) === false)\n          return false;\n        continue;\n      }\n      switch (geometry.type) {\n        case \"Point\":\n        case \"LineString\":\n        case \"MultiPoint\":\n        case \"Polygon\":\n        case \"MultiLineString\":\n        case \"MultiPolygon\": {\n          if (callback(\n            geometry,\n            featureIndex,\n            featureProperties,\n            featureBBox,\n            featureId\n          ) === false)\n            return false;\n          break;\n        }\n        case \"GeometryCollection\": {\n          for (j = 0; j < geometry.geometries.length; j++) {\n            if (callback(\n              geometry.geometries[j],\n              featureIndex,\n              featureProperties,\n              featureBBox,\n              featureId\n            ) === false)\n              return false;\n          }\n          break;\n        }\n        default:\n          throw new Error(\"Unknown Geometry Type\");\n      }\n    }\n    featureIndex++;\n  }\n}\nfunction geomReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  geomEach(\n    geojson,\n    function(currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n      if (featureIndex === 0 && initialValue === void 0)\n        previousValue = currentGeometry;\n      else\n        previousValue = callback(\n          previousValue,\n          currentGeometry,\n          featureIndex,\n          featureProperties,\n          featureBBox,\n          featureId\n        );\n    }\n  );\n  return previousValue;\n}\nfunction flattenEach(geojson, callback) {\n  geomEach(geojson, function(geometry, featureIndex, properties, bbox, id) {\n    var type = geometry === null ? null : geometry.type;\n    switch (type) {\n      case null:\n      case \"Point\":\n      case \"LineString\":\n      case \"Polygon\":\n        if (callback(\n          feature(geometry, properties, { bbox, id }),\n          featureIndex,\n          0\n        ) === false)\n          return false;\n        return;\n    }\n    var geomType;\n    switch (type) {\n      case \"MultiPoint\":\n        geomType = \"Point\";\n        break;\n      case \"MultiLineString\":\n        geomType = \"LineString\";\n        break;\n      case \"MultiPolygon\":\n        geomType = \"Polygon\";\n        break;\n    }\n    for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n      var coordinate = geometry.coordinates[multiFeatureIndex];\n      var geom = {\n        type: geomType,\n        coordinates: coordinate\n      };\n      if (callback(feature(geom, properties), featureIndex, multiFeatureIndex) === false)\n        return false;\n    }\n  });\n}\nfunction flattenReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  flattenEach(\n    geojson,\n    function(currentFeature, featureIndex, multiFeatureIndex) {\n      if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === void 0)\n        previousValue = currentFeature;\n      else\n        previousValue = callback(\n          previousValue,\n          currentFeature,\n          featureIndex,\n          multiFeatureIndex\n        );\n    }\n  );\n  return previousValue;\n}\nfunction segmentEach(geojson, callback) {\n  flattenEach(geojson, function(feature2, featureIndex, multiFeatureIndex) {\n    var segmentIndex = 0;\n    if (!feature2.geometry)\n      return;\n    var type = feature2.geometry.type;\n    if (type === \"Point\" || type === \"MultiPoint\")\n      return;\n    var previousCoords;\n    var previousFeatureIndex = 0;\n    var previousMultiIndex = 0;\n    var prevGeomIndex = 0;\n    if (coordEach(\n      feature2,\n      function(currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {\n        if (previousCoords === void 0 || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {\n          previousCoords = currentCoord;\n          previousFeatureIndex = featureIndex;\n          previousMultiIndex = multiPartIndexCoord;\n          prevGeomIndex = geometryIndex;\n          segmentIndex = 0;\n          return;\n        }\n        var currentSegment = lineString(\n          [previousCoords, currentCoord],\n          feature2.properties\n        );\n        if (callback(\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        ) === false)\n          return false;\n        segmentIndex++;\n        previousCoords = currentCoord;\n      }\n    ) === false)\n      return false;\n  });\n}\nfunction segmentReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  var started = false;\n  segmentEach(\n    geojson,\n    function(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n      if (started === false && initialValue === void 0)\n        previousValue = currentSegment;\n      else\n        previousValue = callback(\n          previousValue,\n          currentSegment,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex,\n          segmentIndex\n        );\n      started = true;\n    }\n  );\n  return previousValue;\n}\nfunction lineEach(geojson, callback) {\n  if (!geojson)\n    throw new Error(\"geojson is required\");\n  flattenEach(geojson, function(feature2, featureIndex, multiFeatureIndex) {\n    if (feature2.geometry === null)\n      return;\n    var type = feature2.geometry.type;\n    var coords = feature2.geometry.coordinates;\n    switch (type) {\n      case \"LineString\":\n        if (callback(feature2, featureIndex, multiFeatureIndex, 0, 0) === false)\n          return false;\n        break;\n      case \"Polygon\":\n        for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n          if (callback(\n            lineString(coords[geometryIndex], feature2.properties),\n            featureIndex,\n            multiFeatureIndex,\n            geometryIndex\n          ) === false)\n            return false;\n        }\n        break;\n    }\n  });\n}\nfunction lineReduce(geojson, callback, initialValue) {\n  var previousValue = initialValue;\n  lineEach(\n    geojson,\n    function(currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n      if (featureIndex === 0 && initialValue === void 0)\n        previousValue = currentLine;\n      else\n        previousValue = callback(\n          previousValue,\n          currentLine,\n          featureIndex,\n          multiFeatureIndex,\n          geometryIndex\n        );\n    }\n  );\n  return previousValue;\n}\nfunction findSegment(geojson, options) {\n  options = options || {};\n  if (!isObject(options))\n    throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var segmentIndex = options.segmentIndex || 0;\n  var properties = options.properties;\n  var geometry;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n  if (geometry === null)\n    return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n      if (segmentIndex < 0)\n        segmentIndex = coords.length + segmentIndex - 1;\n      return lineString(\n        [coords[segmentIndex], coords[segmentIndex + 1]],\n        properties,\n        options\n      );\n    case \"Polygon\":\n      if (geometryIndex < 0)\n        geometryIndex = coords.length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[geometryIndex][segmentIndex],\n          coords[geometryIndex][segmentIndex + 1]\n        ],\n        properties,\n        options\n      );\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][segmentIndex],\n          coords[multiFeatureIndex][segmentIndex + 1]\n        ],\n        properties,\n        options\n      );\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (segmentIndex < 0)\n        segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n      return lineString(\n        [\n          coords[multiFeatureIndex][geometryIndex][segmentIndex],\n          coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]\n        ],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\nfunction findPoint(geojson, options) {\n  options = options || {};\n  if (!isObject(options))\n    throw new Error(\"options is invalid\");\n  var featureIndex = options.featureIndex || 0;\n  var multiFeatureIndex = options.multiFeatureIndex || 0;\n  var geometryIndex = options.geometryIndex || 0;\n  var coordIndex = options.coordIndex || 0;\n  var properties = options.properties;\n  var geometry;\n  switch (geojson.type) {\n    case \"FeatureCollection\":\n      if (featureIndex < 0)\n        featureIndex = geojson.features.length + featureIndex;\n      properties = properties || geojson.features[featureIndex].properties;\n      geometry = geojson.features[featureIndex].geometry;\n      break;\n    case \"Feature\":\n      properties = properties || geojson.properties;\n      geometry = geojson.geometry;\n      break;\n    case \"Point\":\n    case \"MultiPoint\":\n      return null;\n    case \"LineString\":\n    case \"Polygon\":\n    case \"MultiLineString\":\n    case \"MultiPolygon\":\n      geometry = geojson;\n      break;\n    default:\n      throw new Error(\"geojson is invalid\");\n  }\n  if (geometry === null)\n    return null;\n  var coords = geometry.coordinates;\n  switch (geometry.type) {\n    case \"Point\":\n      return point(coords, properties, options);\n    case \"MultiPoint\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      return point(coords[multiFeatureIndex], properties, options);\n    case \"LineString\":\n      if (coordIndex < 0)\n        coordIndex = coords.length + coordIndex;\n      return point(coords[coordIndex], properties, options);\n    case \"Polygon\":\n      if (geometryIndex < 0)\n        geometryIndex = coords.length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[geometryIndex].length + coordIndex;\n      return point(coords[geometryIndex][coordIndex], properties, options);\n    case \"MultiLineString\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex].length + coordIndex;\n      return point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case \"MultiPolygon\":\n      if (multiFeatureIndex < 0)\n        multiFeatureIndex = coords.length + multiFeatureIndex;\n      if (geometryIndex < 0)\n        geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n      if (coordIndex < 0)\n        coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n      return point(\n        coords[multiFeatureIndex][geometryIndex][coordIndex],\n        properties,\n        options\n      );\n  }\n  throw new Error(\"geojson is invalid\");\n}\nexport {\n  coordAll,\n  coordEach,\n  coordReduce,\n  featureEach,\n  featureReduce,\n  findPoint,\n  findSegment,\n  flattenEach,\n  flattenReduce,\n  geomEach,\n  geomReduce,\n  lineEach,\n  lineReduce,\n  propEach,\n  propReduce,\n  segmentEach,\n  segmentReduce\n};\n//# sourceMappingURL=index.js.map","// index.ts\nimport { distance } from \"@turf/distance\";\nimport { segmentReduce } from \"@turf/meta\";\nfunction length(geojson, options = {}) {\n  return segmentReduce(\n    geojson,\n    (previousValue, segment) => {\n      const coords = segment.geometry.coordinates;\n      return previousValue + distance(coords[0], coords[1], options);\n    },\n    0\n  );\n}\nvar turf_length_default = length;\nexport {\n  turf_length_default as default,\n  length\n};\n//# sourceMappingURL=index.js.map","import length from '@turf/length';\r\n\r\n// Function to load and parse the GPX file\r\nfunction loadGPXTracksWithPOIs(map, tracks, index) {\r\n    tracks.forEach((track) => {\r\n        fetch(track.url) \r\n            .then(response => response.text())\r\n            .then(str => {\r\n                const parser = new DOMParser();\r\n                const gpxDoc = parser.parseFromString(str, 'application/xml');\r\n                const geojson = toGeoJSON.gpx(gpxDoc);\r\n\r\n                // Try to extract the name from the first feature in GeoJSON\r\n                const trackName = geojson.features[0]?.properties?.name || `Unnamed Track ${index + 1}`;\r\n                \r\n                // Update the track's name based on the GeoJSON data if available\r\n                track.name = trackName;\r\n\r\n                // Separate POIs from track features\r\n                const trackFeatures = geojson.features.filter(feature => feature.geometry.type !== 'Point');\r\n\r\n                // Unique source and layer IDs for each GPX track\r\n                const sourceId = `gpxTrack${index}`;\r\n                const layerId = `gpxTrackLine${index}`;\r\n                const poiSourceId = `gpxTrackPOIsSource${index}`;\r\n                const poiLayerId = `gpxTrackPOIs${index}`;\r\n                const nameLayerId = `gpxTrackName${index}`;\r\n\r\n                // Remove existing sources and layers if they already exist\r\n                if (map.getSource(sourceId)) {\r\n                    map.removeLayer(layerId);\r\n                    map.removeSource(sourceId);\r\n                }\r\n                if (map.getSource(poiSourceId)) {\r\n                    map.removeLayer(poiLayerId);\r\n                    map.removeSource(poiSourceId);\r\n                }\r\n\r\n                // Add the GPX track as a GeoJSON source\r\n                map.addSource(sourceId, {\r\n                    'type': 'geojson',\r\n                    'data': {\r\n                        \"type\": \"FeatureCollection\",\r\n                        \"features\": trackFeatures\r\n                    }\r\n                });\r\n\r\n                // Add a line layer to display the GPX track\r\n                map.addLayer({\r\n                    'id': layerId,\r\n                    'type': 'line',\r\n                    'source': sourceId,\r\n                    'layout': {\r\n                        'line-join': 'round',\r\n                        'line-cap': 'round'\r\n                    },\r\n                    'paint': {\r\n                        'line-color': '#c3002f', // Red color for the track\r\n                        'line-width': 3\r\n                    }\r\n                });\r\n\r\n                // Calculate total distance and elevation gain\r\n                let distance = length(geojson, { units: 'kilometers' });\r\n                let totalElevationGain = 0;\r\n                const coordinates = trackFeatures[0].geometry.coordinates;\r\n                for (let i = 1; i < coordinates.length; i++) {\r\n                    const prevElevation = coordinates[i - 1][2];\r\n                    const currElevation = coordinates[i][2];\r\n                    if (currElevation > prevElevation) {\r\n                        totalElevationGain += currElevation - prevElevation;\r\n                    }\r\n                }\r\n\r\n                // Add POIs if present\r\n                if (track.pois && track.pois.length > 0) {\r\n                    const poiFeatures = track.pois.map(poi => ({\r\n                        \"type\": \"Feature\",\r\n                        \"geometry\": {\r\n                            \"type\": \"Point\",\r\n                            \"coordinates\": [poi.lng, poi.lat]\r\n                        },\r\n                        \"properties\": {\r\n                            \"name\": poi.name,\r\n                            \"icon\": poi.icon,\r\n                            \"description\": poi.description,\r\n                            \"image\": poi.image\r\n                        }\r\n                    }));\r\n\r\n                    // Add a source for the POIs\r\n                    map.addSource(poiSourceId, {\r\n                        'type': 'geojson',\r\n                        'data': {\r\n                            \"type\": \"FeatureCollection\",\r\n                            \"features\": poiFeatures\r\n                        }\r\n                    });\r\n\r\n                    // Add a symbol layer for the POIs\r\n                    map.addLayer({\r\n                        'id': poiLayerId,\r\n                        'type': 'symbol',\r\n                        'source': poiSourceId,\r\n                        'layout': {\r\n                            'icon-image': ['get', 'icon'],\r\n                            'icon-size': 0.15,\r\n                            'icon-allow-overlap': true,\r\n                            'text-field': ['get', 'name'],\r\n                            'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\r\n                            'text-offset': [0, 1],\r\n                            'text-anchor': 'top'\r\n                        },\r\n                        'paint': {\r\n                            'text-color': '#666666', // Set the text color for the POI labels\r\n                            'text-halo-color': 'white', // Optional: Add a halo for better visibility\r\n                            'text-halo-width': 1\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n                // Add POI interactions\r\n                addPOIPopupInteraction(poiLayerId);\r\n\r\n                // Add interactions based on route type\r\n                if (track.type === 'loop') {\r\n                    addLoopRouteInteraction(layerId, geojson, track, distance, totalElevationGain);\r\n                } else {\r\n\r\n                    addOutAndBackRouteInteraction(layerId, geojson, track, distance, totalElevationGain);\r\n                }\r\n                \r\n\r\n                // Store the popup instance and its update function for future updates\r\n                const popupEntry = {\r\n                    layerId,\r\n                    geojson,\r\n                    track,\r\n                    distance,\r\n                    totalElevationGain,\r\n                    popup: null, // Initially, there is no active popup\r\n                    updateContent: function () {\r\n                        if (this.popup) {\r\n                            updatePopupContent(this.popup, this.geojson, this.track, this.track.selectedDirection);\r\n                        }\r\n                    }\r\n                };\r\n                popupdata.push(popupEntry);\r\n\r\n                // Change the cursor to a pointer when the mouse is over the track, route name, or POIs\r\n                map.on('mouseenter', layerId, function () {\r\n                    map.getCanvas().style.cursor = 'pointer';\r\n                });\r\n                map.on('mouseenter', poiLayerId, function () {\r\n                    map.getCanvas().style.cursor = 'pointer';\r\n                });\r\n                map.on('mouseenter', nameLayerId, function () {\r\n                    map.getCanvas().style.cursor = 'pointer';\r\n                });\r\n\r\n                // Change it back to the default when it leaves\r\n                map.on('mouseleave', layerId, function () {\r\n                    map.getCanvas().style.cursor = '';\r\n                });\r\n                map.on('mouseleave', poiLayerId, function () {\r\n                    map.getCanvas().style.cursor = '';\r\n                });\r\n                map.on('mouseleave', nameLayerId, function () {\r\n                    map.getCanvas().style.cursor = '';\r\n                });\r\n            })\r\n            .catch(error => console.log('Error loading GPX track: ', error));\r\n    });\r\n}\r\n\r\n\r\n// Function to load all GPX tracks and their POIs\r\nfunction loadGPXTracks(map) {\r\n    if (!map) {\r\n        console.error('Map is not initialized');\r\n        return;\r\n    }\r\n\r\n    // Fetch the tracks from the JSON file\r\n    fetch('Tracks/tracks.json')\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch tracks.json: ${response.statusText}`);\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(tracks => {\r\n            // Use Promise.all to load POIs for all tracks before processing them\r\n            return Promise.all(\r\n                tracks.map((track, index) => {\r\n                    return loadPOIs(track.url).then(pois => {\r\n                        track.pois = pois; // Assign loaded POIs to the track\r\n                        return { track, index }; // Return the track along with its index\r\n                    });\r\n                })\r\n            );\r\n        })\r\n        .then(tracksWithIndices => {\r\n            // Now load each track with the preserved index\r\n            tracksWithIndices.forEach(({ track, index }) => {\r\n                loadGPXTracksWithPOIs(map, [track], index);\r\n            });\r\n        })\r\n        .catch(error => console.error('Error loading tracks file:', error));\r\n}\r\n\r\nfunction loadPOIs(trackUrl) {\r\n    // Derive the POI file path from the track URL\r\n    const trackName = trackUrl.split('/').slice(-1)[0].replace('.gpx', '');\r\n    const poiFilePath = `Tracks/${trackName}/poi.txt`;\r\n\r\n    return fetch(poiFilePath)\r\n        .then(response => response.text())\r\n        .then(text => {\r\n            try {\r\n                return JSON.parse(text);\r\n            } catch (error) {\r\n                console.error('Error parsing POI data:', error);\r\n                return [];\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error loading POI file:', error);\r\n            return [];\r\n        });\r\n}\r\n\r\n\r\nexport { loadGPXTracks };"],"names":["getCoord","coord","getCoords","coords","containsNumber","coordinates","geojsonType","value","type","name","featureOf","feature","collectionOf","featureCollection","getGeom","geojson","getType","_name","earthRadius","factors","areaFactors","geom","properties","options","feat","geometry","_options","polygon","multiPoint","multiLineString","multiPolygon","points","ring","j","polygons","lineStrings","features","fc","geometryCollection","geometries","round","num","precision","multiplier","radiansToLength","radians","units","factor","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","azimuthToBearing","degreesToRadians","degrees","convertLength","length","originalUnit","finalUnit","convertArea","area","startFactor","finalFactor","input","validateBBox","bbox","validateId","id","from","to","coordinates1","coordinates2","dLat","dLon","lat1","lat2","a","turf_distance_default","coordEach","callback","excludeWrapCoord","k","l","stopG","geometryMaybeCollection","wrapShrink","coordIndex","isGeometryCollection","isFeatureCollection","isFeature","stop","featureIndex","geomIndex","multiFeatureIndex","geometryIndex","geomType","coordReduce","initialValue","previousValue","currentCoord","propEach","i","propReduce","currentProperties","featureEach","featureReduce","currentFeature","coordAll","geomEach","g","featureProperties","featureBBox","featureId","geomReduce","currentGeometry","flattenEach","coordinate","flattenReduce","segmentEach","feature2","segmentIndex","previousCoords","previousFeatureIndex","previousMultiIndex","prevGeomIndex","featureIndexCoord","multiPartIndexCoord","currentSegment","segmentReduce","started","lineEach","lineReduce","currentLine","findSegment","findPoint","segment","turf_length_default","loadGPXTracksWithPOIs","map","tracks","index","track","response","str","gpxDoc","trackName","trackFeatures","sourceId","layerId","poiSourceId","poiLayerId","nameLayerId","totalElevationGain","prevElevation","currElevation","poiFeatures","poi","popupEntry","error","loadGPXTracks","loadPOIs","pois","tracksWithIndices","trackUrl","poiFilePath","text"],"sourceRoot":""}